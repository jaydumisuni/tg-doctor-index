{
  "version": "2.1",
  "os": "windows",
  "items": [
    {
      "id": "windows-driver-signature-mode",
      "title": "Windows Driver Signature Enforcement â€” DISABLED (Test Mode)",
      "check": {
        "type": "exec_ok",
        "path": "powershell",
        "args": [
          "-NoProfile",
          "-Command",
          "$b = (bcdedit /enum | Out-String); if ($b -match 'testsigning\\s+Yes' -or $b -match 'nointegritychecks\\s+Yes') { exit 0 } else { exit 1 }"
        ]
      },
      "install": {
        "type": "exec",
        "path": "powershell",
        "args": [
          "-NoProfile","-ExecutionPolicy","Bypass","-Command",
          "$root='${env:ProgramData}\\TechGuyTools'; New-Item -ItemType Directory -Force -Path $root | Out-Null;",
          "$ps = Join-Path $root 'ensure_dse_off.ps1';",
          "$code=@\"\n# Toggle Windows Test Mode / DSE off\nbcdedit /set testsigning on 2>$null\nbcdedit /set nointegritychecks on 2>$null\nexit 0\n\"@;",
          "Set-Content -LiteralPath $ps -Value $code -Encoding UTF8;",
          "Start-Process powershell -ArgumentList '-NoProfile','-ExecutionPolicy','Bypass','-File', $ps -Verb runAs -WindowStyle Hidden; Start-Sleep -Seconds 1; exit 0"
        ]
      },
      "notes": "Reboot after enabling Test Mode, then re-run checks."
    },
    {
      "id": "doctor-installer-helper-win",
      "title": "Doctor installer helper present",
      "check": { "type": "file_exists", "path": "{cache_root}/TechGuyCheckm8/tools/win/install_driver.ps1" },
      "install": {
        "type": "exec",
        "path": "powershell",
        "args": [
          "-NoProfile","-ExecutionPolicy","Bypass","-Command",
          "$dst = '{cache_root}/TechGuyCheckm8/tools/win' -replace '/', [IO.Path]::DirectorySeparatorChar;",
          "New-Item -ItemType Directory -Force -Path $dst | Out-Null;",
          "$code=@\"\nparam([string]\n$ZipUrl,[string]\n$CheckType)\n$work = Join-Path $env:TEMP ('drv__'+[Guid]::NewGuid())\nNew-Item -ItemType Directory -Force -Path $work | Out-Null\n$zip = Join-Path $work 'pkg.zip'\nInvoke-WebRequest $ZipUrl -OutFile $zip -UseBasicParsing\nAdd-Type -AssemblyName System.IO.Compression.FileSystem\n[IO.Compression.ZipFile]::ExtractToDirectory($zip, $work)\n$exes = Get-ChildItem $work -Recurse -Include *.exe,*.msi -ErrorAction SilentlyContinue\nforeach ($f in $exes) {\n  if ($f.Extension -ieq '.msi') { Start-Process msiexec -ArgumentList '/i',('\"'+$f.FullName+'\"'),'/qn','/norestart' -Verb runAs -Wait }\n  else { Start-Process $f.FullName -ArgumentList '/S','/quiet','/qn','/norestart' -Verb runAs -Wait }\n}\n$infs = Get-ChildItem $work -Recurse -Filter *.inf -ErrorAction SilentlyContinue\nforeach ($inf in $infs) { pnputil /add-driver \"${inf}\" /install | Out-Null }\nRemove-Item -Recurse -Force $work -ErrorAction SilentlyContinue\nexit 0\n\"@;",
          "Set-Content -LiteralPath (Join-Path $dst 'install_driver.ps1') -Value $code -Encoding UTF8; exit 0"
        ]
      },
      "notes": "Creates the unified driver installer used by all Android items."
    },

    {
      "id": "vc-runtimes-win",
      "title": "Visual C++ Runtimes (All-in-One)",
      "release": { "direct": "https://github.com/jaydumisuni/android-drivers/releases/download/v1/Visual-C-Runtimes-All-in-One.zip" },
      "install": { "type": "exec", "path": "powershell", "args": [ "-NoProfile","-ExecutionPolicy","Bypass","-File","{cache_root}/TechGuyCheckm8/tools/win/install_driver.ps1","-ZipUrl","https://github.com/jaydumisuni/android-drivers/releases/download/v1/Visual-C-Runtimes-All-in-One.zip","-CheckType","vc_runtimes" ] },
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$keys='HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall','HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall'; $ok=Get-ChildItem $keys -ErrorAction SilentlyContinue | % {Get-ItemProperty $_.PSPath} | ? {$_.DisplayName -match 'Microsoft Visual C\\+\\+.*Redistributable'}; if ($ok) {exit 0} else {exit 1}" ] }
    },

    {
      "id": "universal-adb-driver-win",
      "title": "Universal ADB Driver",
      "release": { "direct": "https://github.com/jaydumisuni/android-drivers/releases/download/v1/universal_adb.zip" },
      "install": { "type": "exec", "path": "powershell", "args": [ "-NoProfile","-ExecutionPolicy","Bypass","-File","{cache_root}/TechGuyCheckm8/tools/win/install_driver.ps1","-ZipUrl","https://github.com/jaydumisuni/android-drivers/releases/download/v1/universal_adb.zip","-CheckType","adb_universal" ] },
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$txt=(pnputil /enum-drivers | Out-String); if ($txt -match 'Android ADB Interface' -or $txt -match 'androidwinusb' -or $txt -match 'Google, Inc.' ) {exit 0} else {exit 1}" ] }
    },

    {
      "id": "qualcomm-qdloader-win",
      "title": "Qualcomm QDLoader (9008)",
      "release": { "direct": "https://github.com/jaydumisuni/android-drivers/releases/download/v1/qualcomm_qdloader.zip" },
      "install": { "type": "exec", "path": "powershell", "args": [ "-NoProfile","-ExecutionPolicy","Bypass","-File","{cache_root}/TechGuyCheckm8/tools/win/install_driver.ps1","-ZipUrl","https://github.com/jaydumisuni/android-drivers/releases/download/v1/qualcomm_qdloader.zip","-CheckType","qualcomm" ] },
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$txt=(pnputil /enum-drivers | Out-String); if ($txt -match 'Qualcomm.*QDLoader' -or $txt -match 'HS-USB QDLoader 9008' -or $txt -match 'Provider\\s*:\\s*Qualcomm') {exit 0} else {exit 1}" ] }
    },

    {
      "id": "mediatek-vcom-win",
      "title": "MediaTek VCOM (Preloader/DA)",
      "release": { "direct": "https://github.com/jaydumisuni/android-drivers/releases/download/v1/mediatek_vcom_inf_pack.zip" },
      "install": { "type": "exec", "path": "powershell", "args": [ "-NoProfile","-ExecutionPolicy","Bypass","-File","{cache_root}/TechGuyCheckm8/tools/win/install_driver.ps1","-ZipUrl","https://github.com/jaydumisuni/android-drivers/releases/download/v1/mediatek_vcom_inf_pack.zip","-CheckType","mtk_vcom" ] },
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$txt=(pnputil /enum-drivers | Out-String); if ($txt -match 'MediaTek' -or $txt -match 'VCOM' -or $txt -match 'Preloader') {exit 0} else {exit 1}" ] }
    },

    {
      "id": "unisoc-spreadtrum-inf-win",
      "title": "Unisoc / Spreadtrum (INF pack)",
      "release": { "direct": "https://github.com/jaydumisuni/android-drivers/releases/download/v1/spd_unisoc_inf_pack.zip" },
      "install": { "type": "exec", "path": "powershell", "args": [ "-NoProfile","-ExecutionPolicy","Bypass","-File","{cache_root}/TechGuyCheckm8/tools/win/install_driver.ps1","-ZipUrl","https://github.com/jaydumisuni/android-drivers/releases/download/v1/spd_unisoc_inf_pack.zip","-CheckType","unisoc_inf" ] },
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$txt=(pnputil /enum-drivers | Out-String); if ($txt -match 'Spreadtrum' -or $txt -match 'Unisoc' -or $txt -match 'SciU2S') {exit 0} else {exit 1}" ] }
    },

    {
      "id": "unisoc-spreadtrum-setup-win",
      "title": "Unisoc / Spreadtrum (Setup EXE)",
      "release": { "direct": "https://github.com/jaydumisuni/android-drivers/releases/download/v1/spd_unisoc.zip" },
      "install": { "type": "exec", "path": "powershell", "args": [ "-NoProfile","-ExecutionPolicy","Bypass","-File","{cache_root}/TechGuyCheckm8/tools/win/install_driver.ps1","-ZipUrl","https://github.com/jaydumisuni/android-drivers/releases/download/v1/spd_unisoc.zip","-CheckType","unisoc_setup" ] },
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$txt=(pnputil /enum-drivers | Out-String); if ($txt -match 'Spreadtrum' -or $txt -match 'Unisoc' -or $txt -match 'SciU2S') {exit 0} else {exit 1}" ] }
    },

    {
      "id": "samsung-usb-win",
      "title": "Samsung USB Driver",
      "release": { "direct": "https://github.com/jaydumisuni/android-drivers/releases/download/v1/samsung_usb.zip" },
      "install": { "type": "exec", "path": "powershell", "args": [ "-NoProfile","-ExecutionPolicy","Bypass","-File","{cache_root}/TechGuyCheckm8/tools/win/install_driver.ps1","-ZipUrl","https://github.com/jaydumisuni/android-drivers/releases/download/v1/samsung_usb.zip","-CheckType","samsung_usb" ] },
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$txt=(pnputil /enum-drivers | Out-String); if ($txt -match 'SAMSUNG.*USB' -or $txt -match 'Samsung Android USB') {exit 0} else {exit 1}" ] }
    },

    {
      "id": "exynos-eub-driver-win",
      "title": "Samsung Exynos EUB Driver",
      "release": { "direct": "https://github.com/jaydumisuni/android-drivers/releases/download/v1/exynos.usb.driver.zip" },
      "install": { "type": "exec", "path": "powershell", "args": [ "-NoProfile","-ExecutionPolicy","Bypass","-File","{cache_root}/TechGuyCheckm8/tools/win/install_driver.ps1","-ZipUrl","https://github.com/jaydumisuni/android-drivers/releases/download/v1/exynos.usb.driver.zip","-CheckType","exynos_eub" ] },
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$txt=(pnputil /enum-drivers | Out-String); if ($txt -match 'Exynos' -or ($txt -match 'Samsung' -and $txt -match 'USB')) {exit 0} else {exit 1}" ] }
    },

    {
      "id": "huawei-usb-com-win",
      "title": "Huawei USB/COM Drivers",
      "release": { "direct": "https://github.com/jaydumisuni/android-drivers/releases/download/v1/huawei_usb_com_1.0.zip" },
      "install": { "type": "exec", "path": "powershell", "args": [ "-NoProfile","-ExecutionPolicy","Bypass","-File","{cache_root}/TechGuyCheckm8/tools/win/install_driver.ps1","-ZipUrl","https://github.com/jaydumisuni/android-drivers/releases/download/v1/huawei_usb_com_1.0.zip","-CheckType","huawei_usb" ] },
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$txt=(pnputil /enum-drivers | Out-String); if ($txt -match 'HUAWEI' -or $txt -match 'hw_usbdev' -or $txt -match 'hw_usbvcom') {exit 0} else {exit 1}" ] }
    },

    {
      "id": "lg-usb-win",
      "title": "LG Mobile Driver",
      "release": { "direct": "https://github.com/jaydumisuni/android-drivers/releases/download/v1/lg_usb.zip" },
      "install": { "type": "exec", "path": "powershell", "args": [ "-NoProfile","-ExecutionPolicy","Bypass","-File","{cache_root}/TechGuyCheckm8/tools/win/install_driver.ps1","-ZipUrl","https://github.com/jaydumisuni/android-drivers/releases/download/v1/lg_usb.zip","-CheckType","lg_usb" ] },
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$txt=(pnputil /enum-drivers | Out-String); if ($txt -match 'LG Mobile' -or $txt -match 'LG Electronics') {exit 0} else {exit 1}" ] }
    },

    {
      "id": "htc-usb-win",
      "title": "HTC USB Driver",
      "release": { "direct": "https://github.com/jaydumisuni/android-drivers/releases/download/v1/htc_usb.zip" },
      "install": { "type": "exec", "path": "powershell", "args": [ "-NoProfile","-ExecutionPolicy","Bypass","-File","{cache_root}/TechGuyCheckm8/tools/win/install_driver.ps1","-ZipUrl","https://github.com/jaydumisuni/android-drivers/releases/download/v1/htc_usb.zip","-CheckType","htc_usb" ] },
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$txt=(pnputil /enum-drivers | Out-String); if ($txt -match 'HTC' -or $txt -match 'BMP USB') {exit 0} else {exit 1}" ] }
    },

    {
      "id": "blackberry-usb-win",
      "title": "BlackBerry USB (for Android OS)",
      "release": { "direct": "https://github.com/jaydumisuni/android-drivers/releases/download/v1/BlackBerry-USBDrivers-5.0.0.2_For+Android+OS.zip" },
      "install": { "type": "exec", "path": "powershell", "args": [ "-NoProfile","-ExecutionPolicy","Bypass","-File","{cache_root}/TechGuyCheckm8/tools/win/install_driver.ps1","-ZipUrl","https://github.com/jaydumisuni/android-drivers/releases/download/v1/BlackBerry-USBDrivers-5.0.0.2_For+Android+OS.zip","-CheckType","blackberry_usb" ] },
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$txt=(pnputil /enum-drivers | Out-String); if ($txt -match 'BlackBerry' -or $txt -match 'Research In Motion') {exit 0} else {exit 1}" ] }
    },

    {
      "id": "qualcomm-edl-binding-win",
      "title": "Qualcomm EDL (9008) â€” binding check",
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$ids='(VID_05C6&PID_(9008|900E|90E2)|VID_04B7&PID_98B1)'; $dev=Get-PnpDevice -PresentOnly | ? { $_.InstanceId -match $ids }; if (-not $dev) {exit 0}; $drv=$dev | % { try { [pscustomobject]@{Inf=(Get-PnpDeviceProperty -InstanceId $_.InstanceId -KeyName 'DEVPKEY_Device_DriverInfPath').Data; Prov=(Get-PnpDeviceProperty -InstanceId $_.InstanceId -KeyName 'DEVPKEY_Device_DriverProvider').Data} } catch {} }; if ($drv | ? { $_.Inf -match 'qcser|winusb|libusbk|usbdk' -or $_.Prov -match 'Qualcomm|UsbDk' }) {exit 0} else {exit 1}" ] } },
    {
      "id": "qualcomm-hsusb-binding-win",
      "title": "Qualcomm HS-USB / Diag â€” binding check",
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$ids='VID_05C6&PID_(6000|0012|0013|0014|0015|3225|3226|3227|3228)'; $dev=Get-PnpDevice -PresentOnly | ? { $_.InstanceId -match $ids }; if (-not $dev) {exit 0}; $drv=$dev | % { try { [pscustomobject]@{Inf=(Get-PnpDeviceProperty -InstanceId $_.InstanceId -KeyName 'DEVPKEY_Device_DriverInfPath').Data; Prov=(Get-PnpDeviceProperty -InstanceId $_.InstanceId -KeyName 'DEVPKEY_Device_DriverProvider').Data} } catch {} }; if ($drv | ? { $_.Inf -match 'qcser|winusb|libusbk|usbdk' -or $_.Prov -match 'Qualcomm|UsbDk' }) {exit 0} else {exit 1}" ] } },
    {
      "id": "mtk-preloader-binding-win",
      "title": "MediaTek Preloader/DA â€” binding check",
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$ids='(VID_0E8D&PID_(0023|2031|2032|2033|2034|2050|2051|2052|2053|2054|2063)|VID_22D9&PID_(2031|2032|2033|2034|2050|2051|2052|2053|2054|2063))'; $dev=Get-PnpDevice -PresentOnly | ? { $_.InstanceId -match $ids }; if (-not $dev) {exit 0}; $drv=$dev | % { try { [pscustomobject]@{Inf=(Get-PnpDeviceProperty -InstanceId $_.InstanceId -KeyName 'DEVPKEY_Device_DriverInfPath').Data; Prov=(Get-PnpDeviceProperty -InstanceId $_.InstanceId -KeyName 'DEVPKEY_Device_DriverProvider').Data} } catch {} }; if ($drv | ? { $_.Inf -match 'usbvcom|mediatek|winusb|libusbk|usbdk' -or $_.Prov -match 'MediaTek|UsbDk' }) {exit 0} else {exit 1}" ] } },
    {
      "id": "unisoc-binding-win",
      "title": "Unisoc / Spreadtrum â€” binding check",
      "check": { "type": "exec_ok", "path": "powershell", "args": [ "-NoProfile","-Command", "$ids='(VID_0525&PID_A4A7|VID_1782&PID_(4D00|4D02|4D12|5D29)|VID_2E04&PID_0023)'; $dev=Get-PnpDevice -PresentOnly | ? { $_.
